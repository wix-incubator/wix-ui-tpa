/* eslint-disable */
/*
 * DO NOT EDIT THIS FILE!
 * YOUR CHANGES WILL BE OVERWRITTEN!
 * FILE IS BASED ON .wuf/testkits/enzyme.template.ts
 * AND GENERATED BY `wuf export-teskits`
 */
export const buttonTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/Button/Button.driver')));
export const cardTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/Card/Card.driver')));
export const overlappingCardTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/OverlappingCard/OverlappingCard.driver')));
export const stripCardTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/StripCard/StripCard.driver')));
export const gridTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/Grid/Grid.driver')));
export const statesButtonTestkitFactory = enzymeUniTestkitFactoryCreator(load(require('../src/StatesButton/StatesButton.driver')));
export const autocompleteTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Autocomplete/Autocomplete.driver')));
export const dividerTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Divider/Divider.driver')));
export const iconToggleTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/IconToggle/IconToggle.driver')));
export const inputTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Input/Input.driver')));
export const likeButtonTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/LikeButton/LikeButton.driver')));
export const paginationTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Pagination/Pagination.driver')));
export const tabsTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Tabs/Tabs.driver')));
export const textTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Text/Text.driver')));
export const tooltipTestkitFactory = enzymeTestkitFactoryCreator(load(require('../src/Tooltip/Tooltip.driver')));
const load = module => {
  const MODULE_META_KEYS = ['__esModule'];

  const moduleFields = Object.keys(module).reduce((total, key) => {
    if (!MODULE_META_KEYS.includes(key)) {
      return total.concat(module[key]);
    }
    return total;
  }, []);

  let defaultOrFirstExport;
  if (module.default) {
    defaultOrFirstExport = module.default;
  } else if (moduleFields.length === 1) {
    defaultOrFirstExport = moduleFields[0];
  } else {
    defaultOrFirstExport = module;
  }
  return defaultOrFirstExport;
};