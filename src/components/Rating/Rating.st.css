:import {
    -st-from: "../../common/formatters.st";
    -st-named: color, fallback;
}

:import {
    -st-from: "../../common/palette.st.css";
    -st-named: errorColor;
}

:vars {
    /*Defaults*/
    DefaultColor: color-8;
    DefaultEmptyColor: color-3;
    DisabledColor: color-3;
    IconGap: 3px;
    IconLargeGap: 11px;
    IconLargeSize: 30px;
}

:vars {
    /* Overrides */
    IconColor: --overridable;
    IconEmptyColor: --overridable;
}

.root {
    -st-states: disabled, error, iconSize( enum(small, large) ), mode( enum(input, display) );

    display: inline-block;
}


/* ------ States ------ */

/* ICON SIZE */
.root:iconSize(large) .icon {
   padding: 0 value(IconLargeGap);
}

.root:iconSize(large) .icon svg {
    width: value(IconLargeSize);
    height: value(IconLargeSize);
}

.root .iconList {
    display: flex;
    align-items: center;
    flex-direction: row-reverse;

    margin: 0 calc(0px - value(IconGap));
}

.root:iconSize(large) {
    margin: 0 calc(0px - value(IconLargeGap));
}

/* DISABLED */
.root:hover:not(:disabled):not(:mode(display)) .icon path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
}

.root:disabled .icon path {
    stroke: color(value(DisabledColor));
    fill: transparent;
};

.root:disabled,
.root:disabled {
    cursor: default;
    pointer-events: none;
}

/* ERROR */
.root:error .icon path {
    fill: transparent;
    stroke: color(value(errorColor))
}

/* MODE */
.root:mode(display) .icon {
    cursor: default;
    pointer-events: none;
}

.root:mode(display) .icon path {
    stroke: color(fallback(value(IconEmptyColor), value(DefaultEmptyColor)));
    fill: color(fallback(value(IconEmptyColor), value(DefaultEmptyColor)));
}

/* ------ /States -------*/

.icon {
    -st-states: checked;

    padding: 0 value(IconGap);
}

.root .icon path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
}

.root .icon:checked path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
    fill: color(fallback(value(IconColor), value(DefaultColor)));
 }

.root:not(:mode(display)) .icon:hover path,
.root:not(:mode(display)) .icon:hover ~ .icon path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
    fill: color(fallback(value(IconColor), value(DefaultColor)));
}
