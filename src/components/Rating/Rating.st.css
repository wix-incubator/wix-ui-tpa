:import {
    -st-from: "../../common/formatters.st";
    -st-named: color, fallback;
}

:import {
    -st-from: "../../common/palette.st.css";
    -st-named: errorColor;
}

:vars {
    /*Defaults*/
    DefaultColor: color-8;
    DefaultEmptyColor: color-3;
    DisabledColor: color-3;
    IconGap: 3px;
    IconLargeGap: 11px;
    IconLargeSize: 30px;
}

:vars {
    /* Overrides */
    IconColor: --overridable;
    IconEmptyColor: --overridable;
}

.root {
    -st-states: mobile;

    display: inline-block;
}

.root:hover .icon:not(:disabled) path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
}

.iconList {
    display: flex;
    align-items: center;
    flex-direction: row-reverse;
}

.icon {
    -st-states: checked, disabled, error, mode( enum(input, display) ), iconSize( enum(large) );

    padding: 0 value(IconGap);
}

.icon path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
}

.icon:disabled,
.icon:mode(display) {
    cursor: default;
    pointer-events: none;
}

.icon:disabled path {
    stroke: color(value(DisabledColor));
};

.icon:error path,
.icon:checked:error path {
    fill: transparent;
    stroke: color(value(errorColor));
}

.icon:checked path,
.icon:not(:mode(display)):hover path,
.icon:not(:mode(display)):hover ~ .icon path {
    stroke: color(fallback(value(IconColor), value(DefaultColor)));
    fill: color(fallback(value(IconColor), value(DefaultColor)));
 }

.root .icon:not(:checked):mode(display) path {
    stroke: color(fallback(value(IconEmptyColor), value(DefaultEmptyColor)));
    fill: color(fallback(value(IconEmptyColor), value(DefaultEmptyColor)));
}

.icon:iconSize(large) {
   padding: 0 value(IconLargeGap);
}

.icon:iconSize(large) svg {
    width: value(IconLargeSize);
    height: value(IconLargeSize);
}
