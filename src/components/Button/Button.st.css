:import {
    -st-from: "wix-ui-core/index.st.css";
    -st-named: ButtonNext;
}

:import {
    -st-from: "../../common/formatters.st";
    -st-named: color, fallback, calculate, font, applyOpacity, string;
}

:vars {
    /*Constance*/
    MinWidth: 100px;
    PrimaryColor: color-8;
    SecondaryColor: color-1;
    BasicColor: color-5;
    DisabledColor: color-3;
    BorderWidth: 1;
    BorderRadius: 0;
    TinyFont: "{theme: 'Body-M', size: '14px', lineHeight: '1.43em'}";
    SmallFont: "{theme: 'Body-M', size: '16px', lineHeight: '1.5em'}";
    MediumFont: "{theme: 'Body-M', size: '16px', lineHeight: '1.5em'}";
    LargeFont: "{theme: 'Body-M', size: '20px', lineHeight: '1.5em'}";
    MobileMediumFont: "{theme: 'Body-M', size: '14px', lineHeight: '1.44em'}";
}

/*Overrides*/
:vars {
    /*
        The Button Text color
        @default color-1
    */
    MainTextColor: --overridable;
    /*
        The Button Background color
        @default color-5
    */
    MainBackgroundColor: --overridable;
    /*
        The font of the button's text
        @default {theme: 'Body-M', size: '14px', lineHeight: '1.43em'}
    */
    MainTextFont: --overridable;
    /*
        The border of the button
        @default color-8
    */
    MainBorderColor: --overridable;
    /*
        The button's border width
        @default color- Basic and Primary: 0px, basicSecondary and secondary: 1px
    */
    MainBorderWidth: --overridable;
    /*
        The button border radius
        @default 0
    */
    MainBorderRadius: --overridable;
}

:vars {
    PrimaryTextColor: color(fallback(value(MainTextColor), value(SecondaryColor)));
    PrimaryBorderWidth: fallback(value(MainBorderWidth), 0px);
    PrimaryBorderColor: color(fallback(value(MainBorderColor), value(PrimaryColor)));
    PrimaryBorderRadius: fallback(value(MainBorderRadius), value(BorderRadius));
}

.root {
    -st-extends: ButtonNext;
    -st-states: priority(enum(primary, secondary, basic, basicSecondary)), size(enum(tiny, small, medium, large)), fullWidth, mobile, upgrade;

    min-width: value(MinWidth);
    border-style: solid;
    box-sizing: content-box;
    border-color: color(value(PrimaryBorderColor));
    border-radius: value(PrimaryBorderRadius);
    transition: background-color .2s ease-in-out, border-color .2s ease-in-out, color .2s ease-in-out;
}

.root::content {
    margin: 0 auto;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

.root:fullWidth {
    width: 100%;
    box-sizing: border-box;
}

/*Basic*/

:vars {
    BasicBackgroundColor: color(fallback(value(MainBackgroundColor), value(BasicColor)));
}

.root:priority(basic) {
    color: value(PrimaryTextColor);
    background-color: value(BasicBackgroundColor);
    border-width: value(PrimaryBorderWidth);
}

.root:priority(basic):active,
.root:priority(basic):focus,
.root:priority(basic):hover {
    background-color: applyOpacity(value(BasicBackgroundColor), 0.7);
    color: applyOpacity(value(PrimaryTextColor), 0.7);
}

/*BasicSecondary*/

:vars {
    BasicSecondaryTextColor: color(fallback(value(MainTextColor), value(BasicColor)));
    BasicSecondaryBorderColor: color(fallback(value(MainBorderColor), value(BasicColor)));
}

.root:priority(basicSecondary) {
    color: value(BasicSecondaryTextColor);
    background-color: color(fallback(value(MainBackgroundColor), transparent));
    border-color: value(BasicSecondaryBorderColor);
    border-width: fallback(value(MainBorderWidth), 1px);
}

.root:priority(basicSecondary):active,
.root:priority(basicSecondary):focus,
.root:priority(basicSecondary):hover {
    color: applyOpacity(value(BasicSecondaryTextColor), 0.7);
    border-color: applyOpacity(value(BasicSecondaryBorderColor), 0.7);
}

/*Primary*/

:vars {
    PrimaryBackgroundColor: color(fallback(value(MainBackgroundColor), value(PrimaryColor)));
}

.root:priority(primary) {
    color: value(PrimaryTextColor);
    background-color: value(PrimaryBackgroundColor);
    border-width: value(PrimaryBorderWidth);
}

.root:priority(primary):active,
.root:priority(primary):focus,
.root:priority(primary):hover {
    background-color: applyOpacity(value(PrimaryBackgroundColor), 0.7);
    color: applyOpacity(value(PrimaryTextColor), 0.7);
}

/*Secondary*/

:vars {
    SecondaryTextColor: color(fallback(value(MainTextColor), value(PrimaryColor)));
    SecondaryBorderColor: color(fallback(value(MainBorderColor), value(PrimaryColor)));
}

.root:priority(secondary) {
    color: value(SecondaryTextColor);
    background-color: color(fallback(value(MainBackgroundColor), transparent));
    border-color: value(SecondaryBorderColor);
    border-width: fallback(value(MainBorderWidth), 1px);
}

.root:priority(secondary):active,
.root:priority(secondary):focus,
.root:priority(secondary):hover {
    color: applyOpacity(value(SecondaryTextColor), 0.7);
    border-color: applyOpacity(value(SecondaryBorderColor), 0.7);
}

/*Disabled*/

.root:priority(basic):disabled,
.root:priority(primary):disabled {
    background-color: color(value(DisabledColor));
}

.root:priority(basicSecondary):disabled,
.root:priority(secondary):disabled {
    color: color(value(DisabledColor));
    border-color: color(value(DisabledColor));
}

/*Tiny*/

.root:size(tiny){
    padding: 6px 16px;
    font: fallback(font(value(MainTextFont)), font(value(TinyFont)));
}

/*Small*/

.root:size(small){
    padding: 7px 16px;
    font: fallback(font(value(MainTextFont)), font(value(SmallFont)));
}

/*Medium*/

.root:size(medium){
    padding: 8px 16px;
    font: fallback(font(value(MainTextFont)), font(value(MediumFont)));
}

.root:mobile:size(medium){
    padding: 10px 16px;
    font: fallback(font(value(MainTextFont)), font(value(MobileMediumFont)));
}

/*Large*/

.root:size(large){
    padding: 10px 16px;
    font: fallback(font(value(MainTextFont)), font(value(LargeFont)));
}

/*-------------------------------------upgrage-------------------------------------*/

:vars {
    UpgradeTinyFont: "{theme: 'Body-M', size: '14px', lineHeight: '1'}";
    UpgradeSmallFont: "{theme: 'Body-M', size: '16px', lineHeight: '1'}";
    UpgradeMediumFont: "{theme: 'Body-M', size: '16px', lineHeight: '1'}";
    UpgradeLargeFont: "{theme: 'Body-M', size: '16px', lineHeight: '1'}";
    UpgradeMobileMediumFont: "{theme: 'Body-M', size: '14px', lineHeight: '1'}";
}

:vars {
    mobileFont: fallback(font(value(MainTextFont)), font(value(UpgradeMobileMediumFont)));
    secondaryBorderWidth: fallback(value(MainBorderWidth), 1px);
}

.root:upgrade::content {
    overflow: visible;
    text-overflow: unset;
    white-space: unset;
}

.root:upgrade{
    box-sizing: border-box;
    line-height: 1;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    display: inline-flex;
}

.root:mobile:upgrade{
    font: value(mobileFont);
    line-height: 1;
}

/* upgrade Tiny*/

.root:size(tiny):upgrade{
    font: fallback(font(value(MainTextFont)), font(value(UpgradeTinyFont)));
    line-height: 1;
}

.root:priority(secondary):upgrade:size(tiny), .root:priority(basicSecondary):upgrade:size(tiny){
    padding: calculate(string(-), 9px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(tiny), .root:priority(basic):upgrade:size(tiny){
    padding: calculate(string(-), 9px, value(PrimaryBorderWidth)) 16px;
}

/* upgrade Small*/

.root:size(small):upgrade:not(mobile){
    font: fallback(font(value(MainTextFont)), font(value(UpgradeSmallFont)));
    line-height: 1;
}

.root:upgrade:priority(secondary):size(small), .root:upgrade:priority(basicSecondary):size(small){
    padding: calculate(string(-), 10px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(small), .root:priority(basic):upgrade:size(small){
    padding: calculate(string(-), 10px, value(PrimaryBorderWidth)) 16px;
}
 /*upgrade small mobile*/
.root:upgrade:priority(secondary):size(small):mobile, .root:upgrade:priority(basicSecondary):size(small):mobile{
    padding: calculate(string(-), 11px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(small):mobile, .root:priority(basic):upgrade:size(small):mobile{
    padding: calculate(string(-), 11px, value(PrimaryBorderWidth)) 16px;
}

/* upgrade Medium*/

.root:size(medium):upgrade:not(mobile){
    font: fallback(font(value(MainTextFont)), font(value(UpgradeMediumFont)));
    line-height: 1;
}

.root:upgrade:priority(secondary):size(medium), .root:upgrade:priority(basicSecondary):size(medium){
    padding: calculate(string(-), 12px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(medium), .root:priority(basic):upgrade:size(medium){
    padding: calculate(string(-), 12px, value(PrimaryBorderWidth)) 16px;
}

/*upgrade mobile medium*/
.root:upgrade:priority(secondary):size(medium):mobile, .root:upgrade:priority(basicSecondary):size(medium):mobile{
    padding: calculate(string(-), 13px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(medium):mobile, .root:priority(basic):upgrade:size(medium):mobile{
    padding: calculate(string(-), 13px, value(PrimaryBorderWidth)) 16px;
}

/* upgrade Large*/

.root:size(large):upgrade:not(mobile){
    font: fallback(font(value(MainTextFont)), font(value(UpgradeLargeFont)));
    line-height: 1;
}

.root:size(large):upgrade:priority(secondary), .root:size(large):upgrade:priority(basicSecondary){
    padding: calculate(string(-), 16px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(large), .root:priority(basic):upgrade:size(large){
    padding: calculate(string(-), 16px, value(PrimaryBorderWidth)) 16px;
}

/*upgrade large mobile*/
.root:size(large):upgrade:priority(secondary):mobile, .root:size(large):upgrade:priority(basicSecondary):mobile{
    padding: calculate(string(-), 17px, value(secondaryBorderWidth)) 16px;
}

.root:priority(primary):upgrade:size(large):mobile, .root:priority(basic):upgrade:size(large):mobile{
    padding: calculate(string(-), 17px, value(secondaryBorderWidth)) 16px;
}

.root .affixIcon svg path {
    fill: none;
}

.root:priority(primary) .affixIcon svg path {
    stroke: value(PrimaryTextColor);
}

.root:priority(secondary) .affixIcon svg path {
    stroke: value(SecondaryTextColor);
}

.root:priority(basic) .affixIcon svg path {
    stroke: value(PrimaryTextColor);
}

.root:priority(basicSecondary) .affixIcon svg path {
    stroke: value(BasicSecondaryTextColor);
}

.affixIcon {
    height: 1.5em;
    width: 1.5em;
    display: flex;
}

.affixIcon svg {
    width: 100%;
    height: 100%;
}

.prefix-icon::after, .suffix-icon::before {
    content: '';
    width: 4px;
    height: 1px;
    display: inline-block;
}
